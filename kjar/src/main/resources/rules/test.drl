package rules;

import com.ftn.sbnz.model.Hero;
import com.ftn.sbnz.service.BooleanWrapper;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

global List<Hero> allHeroes;
global List<Hero> recommendedHeroes;
global List<String> pickedHeroes;
global List<Hero> oppositeTeam;
global List<Hero> myTeam;
global List<String> counterPicks;
global List<String> combos;
global String player_rank;
global BooleanWrapper flag;
global BooleanWrapper ableToSort;


rule "Check if role is missing and suggest it if so"
when
    $myTeam: List()
    $roles: Set() from accumulate(Hero($role: role) from $myTeam, collectSet($role))
    $missingRole: String() from ["JUNGLER", "MID", "CARRY", "TANK", "SUPPORT"] 
    not Hero(role == $missingRole) from $myTeam

then
    boolean added = false;
    ableToSort.setValue(false);
    for (Hero hero : allHeroes) {
        if (hero.getRole().equals($missingRole) && !pickedHeroes.contains(hero.getLocalized_name()) && !recommendedHeroes.contains(hero)) {
            hero.addScore(100);
            recommendedHeroes.add(hero);
            added = true;
        }
    }

    System.out.println("Recommended picks: ");
    for (Hero hero : recommendedHeroes) {
        System.out.println("\t" + hero.getLocalized_name() + "(" + hero.getRole() + "), Score: " + hero.getScore());
    }
    if (added) {
        flag.setValue(true);
        System.out.println("These picks were recommended because your team does not have the role: " + $missingRole);
    }
end;


rule "Cut some heroes from recommended list with counter picks"
when
    eval(!counterPicks.isEmpty() && flag.getValue())
then
    List<Hero> newList = new ArrayList<>();
    for (Hero hero : recommendedHeroes) {
        if (counterPicks.contains(hero.getLocalized_name())) {
        	hero.addScore(200);
            newList.add(hero);
        }
    }
    if (!newList.isEmpty()) {
        System.out.println("\nBest picks list (COUNTERS):");
        for (Hero hero : newList) {
        	System.out.println("\tHero name: " + hero.getLocalized_name());
    		for (String s : hero.getGoodAgainst()) {
    			for (Hero oppositeHero: oppositeTeam) {
    				if (oppositeHero.getLocalized_name().equals(s)) {
    					System.out.println("\tCounters: " + oppositeHero.getLocalized_name());
    				}
    			}
    		}
    	    System.out.println("\tScore: " + hero.getScore());
    		System.out.println("");
        }
        ableToSort.setValue(true);
        System.out.println("These picks were recommended because you can counter enemy hero by picking one of these, which is much better than any other picks");
    }
end;

rule "Suggest the most if combo pick is available"
when
    eval(!combos.isEmpty() && flag.getValue())
then
    List<Hero> newList = new ArrayList<>();
    for (Hero hero : recommendedHeroes) {
        if (combos.contains(hero.getLocalized_name())) {
        	hero.addScore(100);
            newList.add(hero);
        }
    }
    if (!newList.isEmpty()) {
        System.out.println("\nBest picks list (COMBOS):");
        for (Hero hero : newList) {
            System.out.println("\tHero name: " + hero.getLocalized_name());
            for (String s : hero.getCombo()) {
            	for (Hero heroMyTeam : myTeam) {
            		if (heroMyTeam.getLocalized_name().equals(s)) {
    					System.out.println("\tCombo with: " + heroMyTeam.getLocalized_name());
    				}
            	}
            }
            System.out.println("\tScore: " + hero.getScore());
            System.out.println("");
        }
        ableToSort.setValue(true);
        System.out.println("These picks were recommended because you can create a combo by picking one of these, which is much better than any other picks");
    }
end;

rule "Add meta points to score"
when
	eval(ableToSort.getValue())
then
	System.out.println("\nAdded meta points to heroes: ");
	for (Hero hero : recommendedHeroes) {
		hero.addScore(hero.getMeta());
		hero.addScore(hero.getMeta());
	}
	Collections.sort(recommendedHeroes);
	for (Hero hero : recommendedHeroes) {
            System.out.println("\t" + hero.getLocalized_name() + " (" + hero.getScore() + ")");
        }
end;

rule "Add player skills points to score"
when
	eval(ableToSort.getValue())
then
	System.out.println("\nAdded player skills points to heroes: ");
	for (Hero hero : recommendedHeroes) {
		hero.addScore(hero.getPlayer_skills());
	}
	Collections.sort(recommendedHeroes);
	for (Hero hero : recommendedHeroes) {
            System.out.println("\t" + hero.getLocalized_name() + " (" + hero.getScore() + ")");
        }
end;

rule "Add 50 points if hero is in correct rank where played"
when
	eval(ableToSort.getValue())
then
	System.out.println("\nAdded 50 points if hero is played in correct rank where played: ");
	for (Hero hero : recommendedHeroes) {
		if (hero.getRank_play().equals(player_rank)) {
			hero.addScore(50);
		}
	}
	Collections.sort(recommendedHeroes);
	for (Hero hero : recommendedHeroes) {
            System.out.println("\t" + hero.getLocalized_name() + " (" + hero.getScore() + ")");
        }
end;

rule "Final list"
when 
	eval(ableToSort.getValue())
then
	System.out.println("\nFinal list: ");
	Collections.sort(recommendedHeroes);
	for (Hero hero : recommendedHeroes) {
            System.out.println("\t" + hero.getLocalized_name() + " (" + hero.getScore() + ")");
        }
end;

	
